#include <iostream>
#include <vector>
#include <complex>
#include <cmath>

class QAMModulator {
public:
    enum Mode { QPSK, QAM16, QAM64 };

    QAMModulator(Mode mode) : mode(mode) {}

    std::vector<std::complex<double>> modulate(const std::vector<bool>& bits) {
        switch (mode) {
            case QPSK:
                return modulateQPSK(bits);
            case QAM16:
                return modulateQAM16(bits);
            case QAM64:
                return modulateQAM64(bits);
            default:
                throw std::invalid_argument("Unsupported modulation mode.");
        }
    }

private:
    Mode mode;

    std::vector<std::complex<double>> modulateQPSK(const std::vector<bool>& bits) {
        return modulateGeneric(bits, 2, 1.0);
    }

    std::vector<std::complex<double>> modulateQAM16(const std::vector<bool>& bits) {
        return modulateGeneric(bits, 4, 1.0);
    }

    std::vector<std::complex<double>> modulateQAM64(const std::vector<bool>& bits) {
        return modulateGeneric(bits, 6, 1.0);
    }

    // Generic modulation function
    std::vector<std::complex<double>> modulateGeneric(const std::vector<bool>& bits, int bitsPerSymbol, double scale) {
        int symbolsCount = bits.size() / bitsPerSymbol;
        std::vector<std::complex<double>> symbols(symbolsCount);

        for (int i = 0; i < symbolsCount; ++i) {
            int bitIndex = i * bitsPerSymbol;
            double I = 0.0, Q = 0.0; // In-phase and Quadrature components

            // Convert bits to symbol
            for (int b = 0; b < bitsPerSymbol / 2; ++b) {
                I += (bits[bitIndex + b] ? 1 : -1) * pow(2, (bitsPerSymbol / 2 - b - 1));
                Q += (bits[bitIndex + b + bitsPerSymbol / 2] ? 1 : -1) * pow(2, (bitsPerSymbol / 2 - b - 1));
            }

            symbols[i] = std::complex<double>(I, Q) * scale;
        }

        return symbols;
    }
};

int main() {
    QAMModulator modulator(QAMModulator::QAM16);
    std::vector<bool> bits = {1, 0, 0, 1, 1, 1, 0, 0}; // Пример битов для QAM-16
    auto symbols = modulator.modulate(bits);

    for (auto symbol : symbols) {
        std::cout << symbol << std::endl;
    }

    return 0;
}
